const apiData = {
    "Downloader": [
        {
            method: "GET",
            title: "YouTube Downloader",
            status: "online",
            description: "API to download videos or shorts from YouTube.",
            endpoint: "/api/ytdl?url=&type="
        },
        {
            method: "GET",
            title: "Twitter Downloader",
            status: "online",
            description: "API to download videos or images from Twitter.",
            endpoint: "/api/twitterdl?url="
        },
        {
            method: "GET",
            title: "Instagram Downloader",
            status: "offline",
            description: "API to download videos or images from Instagram.",
            endpoint: "/api/igdl?url="
        },
        {
            method: "GET",
            title: "Facebook Downloader",
            status: "online",
            description: "API to download videos from Facebook.",
            endpoint: "/api/fbdl?url="
        },
        {
            method: "GET",
            title: "TikTok Downloader",
            status: "online",
            description: "API to download videos from TikTok.",
            endpoint: "/api/ttdl?url="
        },
        {
            method: "GET",
            title: "GitHub Cloning",
            status: "online",
            description: "Clone repositories from GitHub.",
            endpoint: "/api/gitclone?url="
        },
        {
            method: "GET",
            title: "Spotify Downloader",
            status: "online",
            description: "Easily download all songs from Spotify.",
            endpoint: "/api/spotifydl?url="
        }
    ],
    "Search": [
        {
            method: "GET",
            title: "Search Groups",
            status: "online",
            description: "API to search WhatsApp groups based on keywords.",
            endpoint: "/api/searchgroups?q="
        },
        {
            method: "GET",
            title: "Random Meme",
            status: "online",
            description: "Random image containing a meme, with customizable count (number).",
            endpoint: "/api/randommeme?count="
        },
        {
            method: "GET",
            title: "TikTok Search",
            status: "online",
            description: "API to search TikTok videos based on a query.",
            endpoint: "/api/ttsearch?q="
        },
        {
            method: "GET",
            title: "YouTube Search",
            status: "online",
            description: "API to search YouTube videos based on a keyword or query.",
            endpoint: "/api/ytsearch?q="
        },
        {
            method: "GET",
            title: "NPM Search",
            status: "online",
            description: "Search for available package/module/library based on your query (q).",
            endpoint: "/api/npmsearch?q="
        },
        {
            method: "GET",
            title: "Google Search",
            status: "online",
            description: "Quickly search for anything and everything on Google.",
            endpoint: "/api/googlesearch?q="
        },
        {
            method: "GET",
            title: "DuckDuckGo Search",
            status: "offline",
            description: "Search for anything and everything on DuckDuckGo easily.",
            endpoint: "/api/duckduckgo?q="
        },
        {
            method: "GET",
            title: "Pinterest",
            status: "online",
            description: "Search images on Pinterest based on your query (q).",
            endpoint: "/api/pinterest?q="
        },
        {
            method: "GET",
            title: "Spotify Search",
            status: "online",
            description: "Search for songs with other complete information based on your query (q).",
            endpoint: "/api/spotifysearch?q="
        }
    ],
    "Stalker": [
        {
            method: "GET",
            title: "Genshin Stalk",
            status: "online",
            description: "Stalk Genshin account based on your UID.",
            endpoint: "/api/gistalk?uid="
        },
        {
            method: "GET",
            title: "GitHub Stalk",
            status: "online",
            description: "Stalk GitHub account based on the username.",
            endpoint: "/api/githubstalk?username="
        }
    ],
    "AI": [
        {
            method: "GET",
            title: "LLaMA 3.3 70B Versatile",
            status: "online",
            description: "API to access the versatile LLaMA 3.3 70B model.",
            endpoint: "/api/llama-3.3-70b-versatile?content="
        },
        {
            method: "GET",
            title: "Gemini AI",
            status: "online",
            description: "API to access the versatile Gemini AI model.",
            endpoint: "/api/gemini?text="
        },
        {
            method: "GET",
            title: "Txt2Img",
            status: "online",
            description: "API to create images from AI with many styles.",
            endpoint: "/api/txt2img?prompt=&style="
        }
    ],
    "Tools": [
        {
            method: "GET",
            title: "Genshin Character Build",
            status: "online",
            description: "Complete Genshin Impact character builds based on your query (q).",
            endpoint: "/api/genshinbuild?q="
        },
        {
            method: "GET",
            title: "Screenshot Web",
            status: "online",
            description: "API to take website screenshots easily.",
            endpoint: "/api/ssweb?url="
        },
        {
            method: "GET",
            title: "Translate",
            status: "online",
            description: "API to translate any language into your desired language.",
            endpoint: "/api/translate?text=&to="
        },
        {
            method: "GET",
            title: "Nulis",
            status: "online",
            description: "Create a book image with text based on your text query.",
            endpoint: "/api/nulis?text="
        },
        {
            method: "GET",
            title: "Weather",
            status: "online",
            description: "Get weather information for any city in the world based on your city query.",
            endpoint: "/api/cuaca?kota="
        },
        {
            method: "GET",
            title: "QR Code Generator",
            status: "online",
            description: "Generate QR codes automatically with ease.",
            endpoint: "/api/qrcodegenerator?text="
        },
        {
            method: "GET",
            title: "Credit Card Generator",
            status: "online",
            description: "Fake Credit Card generator for fun.",
            endpoint: "/api/vcc?type=&count="
        }
    ],
    "Fun": [
        {
            method: "GET",
            title: "Check Khodam",
            status: "online",
            description: "Fun game that shows someone's Khodam based on their name.",
            endpoint: "/api/cekkhodam?nama="
        },
        {
            method: "GET",
            title: "Did You Know?",
            status: "online",
            description: "Fun game that shows random facts you may not know.",
            endpoint: "/api/tahukahkamu"
        }
    ],
    "Sticker": [
        {
            method: "GET",
            title: "Brat Image",
            status: "online",
            description: "Convert your text into a brat image.",
            endpoint: "/api/brat?text="
        },
        {
            method: "GET",
            title: "Quoted Chat",
            status: "online",
            description: "Create an image with a quoted chat design that you can customize with name, color, profile photo, and more.",
            endpoint: "/api/qc?text=&name=&color=&profile="
        }
    ],
    "News": [
        {
            method: "GET",
            title: "Detik News",
            status: "online",
            description: "Get the latest news from Detik News.",
            endpoint: "/api/detiknews"
        },
        {
            method: "GET",
            title: "Kompas",
            status: "offline",
            description: "Get the latest news from Kompas.",
            endpoint: "/api/kompasnews"
        }
    ]
};

function syntaxHighlight(json) {
    let jsonStr = JSON.stringify(json, null, 2)
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;');
    return jsonStr.replace(/("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g, 
        function(match) {
            let cls = 'number';
            if (/^"/.test(match)) cls = match.endsWith(':') ? 'key' : 'string';
            else if (/true|false/.test(match)) cls = 'boolean';
            else if (/null/.test(match)) cls = 'null';
            return `<span class="${cls}">${match}</span>`;
        });
}

function searchEndpoints() {
  const searchInput = document.getElementById('search-input');
  const searchTerm = searchInput.value.toLowerCase();
  
  document.querySelectorAll('.api-item').forEach(item => {
    const title = item.querySelector('.api-title').textContent.toLowerCase();
    const description = item.querySelector('.api-description p').textContent.toLowerCase();
    item.style.display = (title.includes(searchTerm) || description.includes(searchTerm)) 
      ? 'block' 
      : 'none';
  });

  document.querySelectorAll('.api-category').forEach(category => {
    const hasVisibleItems = category.querySelector('.api-item[style="display: block;"]');
    category.style.display = hasVisibleItems ? 'block' : 'none';
  });
}

document.getElementById('search-input').addEventListener('input', searchEndpoints);

function createApiItem(api) {
    const apiItem = document.createElement('div');
    apiItem.className = 'api-item';

    // Header section
    const header = document.createElement('div');
    header.className = 'api-header';

    const method = document.createElement('span');
    method.className = 'api-method';
    method.textContent = api.method;

    const title = document.createElement('span');
    title.className = 'api-title';
    title.textContent = api.title;

    const statusBadge = document.createElement('span');
    statusBadge.className = `api-status-badge ${api.status}`;
    statusBadge.textContent = api.status.toUpperCase();

    header.appendChild(method);
    header.appendChild(title);
    header.appendChild(statusBadge);

    // Description section (hidden by default)
    const descriptionSection = document.createElement('div');
    descriptionSection.className = 'api-description';
    descriptionSection.style.display = 'none';

    const descriptionText = document.createElement('p');
    descriptionText.textContent = api.description;

    const endpointSection = document.createElement('div');
    endpointSection.className = 'api-endpoint';
    endpointSection.textContent = `Endpoint: ${api.endpoint}`;

    // Button container
    const buttonContainer = document.createElement('div');
    buttonContainer.className = 'api-button-container';

    // Open button
    const openButton = document.createElement('button');
    openButton.innerHTML = '<i class="fas fa-external-link-alt"></i> Open Endpoint';
    openButton.style.alignSelf = 'center';
    openButton.onclick = () => {
        const finalEndpoint = api.modifiedEndpoint || api.endpoint;
        window.open(finalEndpoint, '_blank');
    };

    // Copy button
    const copyButton = document.createElement('button');
    copyButton.innerHTML = '<i class="far fa-copy"></i> Copy Endpoint';
    copyButton.style.alignSelf = 'center';
    copyButton.onclick = () => {
        const endpointToCopy = api.modifiedEndpoint || api.endpoint;
        navigator.clipboard.writeText(endpointToCopy)
            .then(() => alert('Endpoint copied successfully!'))
            .catch(err => console.error('Failed to copy:', err));
    };

    // Query input button
    /*"
    const queryInputButton = document.createElement('button');
    queryInputButton.innerHTML = '<i class="fas fa-pencil-alt"></i> Enter Query';
    queryInputButton.style.alignSelf = 'center';
    queryInputButton.onclick = () => {
        const input = prompt('Enter query value (e.g., userId=123):');
        if (input) {
            const hasQuestionMark = api.endpoint.includes('?');
            const connector = hasQuestionMark ? '&' : '?';
            const newEndpoint = api.endpoint + connector + input;
            api.modifiedEndpoint = newEndpoint;
            endpointSection.textContent = `Endpoint: ${newEndpoint}`;
            alert(`New endpoint set: ${newEndpoint}`);
        }
    };
    */
    
    const queryInputButton = document.createElement('button');
    const toggleResponseButton = document.createElement('button');
    toggleResponseButton.className = 'toggle-response-btn';
    toggleResponseButton.innerHTML = '<i class="fas fa-code"></i> Get Response';
    toggleResponseButton.style.alignSelf = 'center';

    let isResponseVisible = false;
    const responseSection = document.createElement('div');
    responseSection.className = 'api-response';
    responseSection.style.display = 'none';

    toggleResponseButton.onclick = async () => {
    isResponseVisible = !isResponseVisible;

    if (isResponseVisible) {
        toggleResponseButton.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Fetching...';

        // Retrieve the query from the button's data
        const queryFromButton = queryInputButton.dataset.query;

        // Check if there's no query in the button
        if (!queryFromButton) {
            // Prompt user for data/query/url if no query exists
            const userInput = prompt('Enter query or data (e.g., userId=123 or a complete URL):');
            if (userInput) {
                // Check if the user input is a valid URL or just query parameters
                const isUrl = userInput.startsWith('http') || userInput.startsWith('www');
                let endpointURL = api.modifiedEndpoint || api.endpoint;

                if (isUrl) {
                    // If it's a URL, set it directly as the endpoint
                    api.modifiedEndpoint = userInput;
                    endpointURL = userInput;
                } else {
                    // If it's query data, append it to the current endpoint
                    const connector = endpointURL.includes('?') ? '&' : '?';
                    endpointURL += connector + userInput;
                    api.modifiedEndpoint = endpointURL;
                }

                // Update the UI with the new endpoint
                endpointSection.textContent = `Endpoint: ${endpointURL}`;
                queryInputButton.dataset.query = userInput; // Store the query data in the button
            } else {
                // If the user doesn't provide anything, stop the request
                alert('You must enter a query or URL to continue.');
                toggleResponseButton.innerHTML = '<i class="fas fa-code"></i> Get Response';
                responseSection.style.display = 'none';
                return;
            }
        }

        // Proceed with the API request
        try {
            const endpointURL = api.modifiedEndpoint || api.endpoint;
            if (endpointURL.includes('?') && endpointURL.endsWith('=')) {
                endpointURL += 'test'; // fallback value if query is incomplete
            }

            const response = await axios.get(endpointURL);

            const responsePre = document.createElement('pre');
            responsePre.innerHTML = syntaxHighlight(response.data);

            responseSection.innerHTML = '<strong>Live Response:</strong>';
            responseSection.appendChild(responsePre);

            toggleResponseButton.innerHTML = '<i class="fas fa-times"></i> Hide Response';
            responseSection.style.display = 'block';
        } catch (err) {
            responseSection.innerHTML = `<strong>Error:</strong> ${err.message}`;
            toggleResponseButton.innerHTML = '<i class="fas fa-code"></i> Get Response';
        }
    } else {
        toggleResponseButton.innerHTML = '<i class="fas fa-code"></i> Get Response';
        responseSection.style.display = 'none';
    }
};
    
    buttonContainer.appendChild(openButton);
    buttonContainer.appendChild(copyButton);
    // buttonContainer.appendChild(queryInputButton);
    buttonContainer.appendChild(toggleResponseButton);

    // Assemble all parts
    descriptionSection.appendChild(descriptionText);
    descriptionSection.appendChild(endpointSection);
    descriptionSection.appendChild(buttonContainer);
    descriptionSection.appendChild(responseSection);

    header.addEventListener('click', () => {
        descriptionSection.style.display = descriptionSection.style.display === 'none' ? 'block' : 'none';
    });

    apiItem.appendChild(header);
    apiItem.appendChild(descriptionSection);

    return apiItem;
}

function setupToggleDescriptions() {
    const apiHeaders = document.querySelectorAll('.api-header');

    apiHeaders.forEach(header => {
        header.addEventListener('click', function () {
            document.querySelectorAll('.api-description').forEach(desc => {
                desc.style.display = "none";
            });

            const description = this.nextElementSibling;
            if (description.style.display === "none" || !description.style.display) {
                description.style.display = "block";
            } else {
                description.style.display = "none";
            }
        });
    });
}

function updateStatistics() {
    let totalEndpoints = 0;
    let onlineEndpoints = 0;
    let offlineEndpoints = 0;

    for (const category in apiData) {
        apiData[category].forEach(api => {
            totalEndpoints++;
            if (api.status === 'online') {
                onlineEndpoints++;
            } else {
                offlineEndpoints++;
            }
        });
    }

    document.getElementById('total-endpoints').textContent = totalEndpoints;
    document.getElementById('online-endpoints').textContent = onlineEndpoints;
    document.getElementById('offline-endpoints').textContent = offlineEndpoints;
}

document.addEventListener('DOMContentLoaded', function() {
    const switchContainer = document.createElement('div');
    switchContainer.className = 'theme-switch-container';
    switchContainer.innerHTML = `
        <label class="theme-switch">
            <input type="checkbox" id="theme-toggle">
            <span class="slider">
                <i class="fas fa-sun icon sun-icon"></i>
                <i class="fas fa-moon icon moon-icon"></i>
            </span>
        </label>
    `;
    document.body.appendChild(switchContainer);
    const isDarkMode = localStorage.getItem('darkMode') === 'true';
    const themeToggle = document.getElementById('theme-toggle');
    if (isDarkMode) {
        document.body.classList.add('dark-theme');
        themeToggle.checked = true;
    }
    themeToggle.addEventListener('change', function() {
        if (this.checked) {
            document.body.classList.add('dark-theme');
            localStorage.setItem('darkMode', 'true');
        } else {
            document.body.classList.remove('dark-theme');
            localStorage.setItem('darkMode', 'false');
        }
    });
});

function loadApiData() {
    const apiCategoriesContainer = document.getElementById('api-categories');

    for (const category in apiData) {
        const apiCategory = document.createElement('div');
        apiCategory.className = 'api-category';

        const categoryTitle = document.createElement('h2');
        categoryTitle.textContent = category;

        const apiList = document.createElement('div');
        apiList.className = 'api-list';

        apiData[category].forEach(api => {
            const apiItem = createApiItem(api);
            apiList.appendChild(apiItem);
        });

        apiCategory.appendChild(categoryTitle);
        apiCategory.appendChild(apiList);
        apiCategoriesContainer.appendChild(apiCategory);
    }

    setupToggleDescriptions();
    updateStatistics();
}

document.addEventListener('DOMContentLoaded', loadApiData);